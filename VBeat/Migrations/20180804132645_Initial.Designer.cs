// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VBeat.Models;

namespace VBeat.Migrations
{
    [DbContext(typeof(ArtistDbContext))]
    [Migration("20180804132645_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("VBeat.Models.ArtistModel", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArtistImage");

                    b.Property<string>("ArtistName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("DateOfRegistration");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<DateTime>("TimeOfLastLogin");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("UserId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("VBeat.Models.BridgeModel.ArtistShowModel", b =>
                {
                    b.Property<int>("ShowId");

                    b.Property<int>("UserId");

                    b.HasKey("ShowId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ArtistShowModel");
                });

            modelBuilder.Entity("VBeat.Models.BridgeModel.ArtistSongModel", b =>
                {
                    b.Property<int>("SongId");

                    b.Property<int>("UserId");

                    b.HasKey("SongId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ArtistSongModel");
                });

            modelBuilder.Entity("VBeat.Models.PlaylistModel", b =>
                {
                    b.Property<int>("PlaylistId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ArtistModelUserId");

                    b.Property<string>("PlaylistImage");

                    b.Property<bool>("Public");

                    b.HasKey("PlaylistId");

                    b.HasIndex("ArtistModelUserId");

                    b.ToTable("PlaylistModel");
                });

            modelBuilder.Entity("VBeat.Models.ShowModel", b =>
                {
                    b.Property<int>("ShowId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<int>("HouseNumber");

                    b.Property<string>("ShowName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("ShowTime");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("ShowId");

                    b.ToTable("Shows");
                });

            modelBuilder.Entity("VBeat.Models.SongModel", b =>
                {
                    b.Property<int>("SongId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Genre")
                        .IsRequired();

                    b.Property<int?>("PlaylistModelPlaylistId");

                    b.Property<DateTime>("ReleaseDate");

                    b.Property<string>("SongImagePath");

                    b.Property<string>("SongName")
                        .IsRequired();

                    b.Property<string>("SongPath")
                        .IsRequired();

                    b.HasKey("SongId");

                    b.HasIndex("PlaylistModelPlaylistId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("VBeat.Models.BridgeModel.ArtistShowModel", b =>
                {
                    b.HasOne("VBeat.Models.ShowModel", "Show")
                        .WithMany("ArtistList")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBeat.Models.ArtistModel", "Artist")
                        .WithMany("Shows")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VBeat.Models.BridgeModel.ArtistSongModel", b =>
                {
                    b.HasOne("VBeat.Models.SongModel", "Song")
                        .WithMany("ArtistList")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBeat.Models.ArtistModel", "Artist")
                        .WithMany("SongList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VBeat.Models.PlaylistModel", b =>
                {
                    b.HasOne("VBeat.Models.ArtistModel")
                        .WithMany("SavedPlaylists")
                        .HasForeignKey("ArtistModelUserId");
                });

            modelBuilder.Entity("VBeat.Models.SongModel", b =>
                {
                    b.HasOne("VBeat.Models.PlaylistModel")
                        .WithMany("Songs")
                        .HasForeignKey("PlaylistModelPlaylistId");
                });
#pragma warning restore 612, 618
        }
    }
}
